# Update MYSQL_HOST, MYSQL_USER & secretProviderClass values.

---
# DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: votingapp
  namespace: titan
  labels:
    app: votingapp
  annotations:
    kubernetes.io/change-cause: latest
spec:
  selector:                    # Specifies a label selector for the pods targeted by this deployment.
    matchLabels:
      app: votingapp
  replicas: 1                  # Specifies the number of desired Pods
  strategy:                    # This strategy says we want to add pods one at a time (maxSurge), and there must always be 3 pods ready (replicas).
    type: RollingUpdate        # Type 'rolling' or 'recreate'.
    rollingUpdate:             # The deployment updates pods in a rolling update fashion.
      maxSurge: 1              # maxSurge is the maximum number of new pods that will be created at a time.
      maxUnavailable: 0        # maxUnavailable is the maximum number of old pods that will be deleted at a time.
  minReadySeconds: 10          # The min # of secs a new pod should be ready without any of its containers crashing, for it to be considered available.
  revisionHistoryLimit: 3      # The number of old replicasets to retain to allow rollback.
  template:                    # The pod template. It has exactly the same schema as a pod, except it is nested and does not have an apiVersion or kind.
    metadata:
      name: votingapp
      labels:
        app: votingapp
    spec:
      containers:
      - name: votingapp
        image: "acrdlnteudemoapps210713.azurecr.io/votingapp:latest"
        imagePullPolicy: Always
        resources:
          requests:            # Minimum amount of resources requested.
            cpu: 50m           # 1/20th of a vCPU; a vCPU is 1000m (millicores).
            memory: 64Mi       # 64 Mebibytes
          limits:              # Maximum amount of resources requested.
            cpu: 100m          # 1/10th of a CPU.
            memory: 128Mi      # 256 Mebibytes.
        ports:
        - containerPort: 8080  # This container exposes port 8080.
          protocol: TCP
        volumeMounts:          # Volume mount for csi-driver kv secrets.
        - name: kv-secrets
          mountPath: "/mnt/secrets"
          readOnly: true
        env:
        - name: MYSQL_HOST
          value: "mysql-prd-titan-230930.mysql.database.azure.com"
        - name: MYSQL_USER
          value: "mysqladmin@mysql-prd-titan-230930"
        - name: MYSQL_DATABASE
          value: "azurevote"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: so-titan
              key: SQL-ADMIN-PASSWORD
        - name: APPLICATIONINSIGHTS_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: so-titan
              key: APPLICATIONINSIGHTS-CONNECTION-STRING
      volumes:
        - name: kv-secrets
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "spc-kv-prd-titan-230930"
---
# HORIZONTAL POD AUTOSCALER
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: votingapp-hpa
  namespace: titan
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: votingapp
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
# SERVICE
apiVersion: v1
kind: Service
metadata:
  name: votingapp
  namespace: titan
spec:
  selector:
    app: votingapp
  type: NodePort               # The type of service port e.g.ClusterIP (Default), NodePort or LoadBalancer.
  ports:
  - protocol: TCP
    port: 8080                 # The port exposed by the service.
    targetPort: 8080           # The port to forward to in the pod/deployment.
---
# INGRESS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: votingapp
  namespace: titan
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway # < add annotation indicating the ingress to use.
    appgw.ingress.kubernetes.io/ssl-redirect: "true"       # < add annotation to redirect 80 requests to 443.
    cert-manager.io/cluster-issuer: letsencrypt-issuer     # < add annotation indicating the cert issuer to use.
spec:
  tls: # < placing a host in the TLS config will determine what ends up in the cert's subjectAltNames.
  - hosts:
    - prd.rhod3rz.com           # UPDATE HERE
    secretName: prd.rhod3rz.com # UPDATE HERE < cert-manager will store the created certificate in this secret.
  rules:
  - host: prd.rhod3rz.com       # UPDATE HERE < Ensure public dns has been updated with the pip of appgw.
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: votingapp
            port:
              number: 8080
---
